#!/bin/bash
# Общественное достояние, 2024, Алексей Безбородов (Alexei Bezborodov) <AlexeiBv+mirocod_pdf2video@narod.ru> 

# Озвучивание русского текста из файла pdf и сохранение в видео

version=1.0

# Формат:
# "Однобуквенная команда|Расширенная команда|Справка|Параметр|Значение по умолчанию|Команда на исполнение"
# Параметр: Пусто - нет параметров, : - есть параметр, :: - параметр не обязателен

common_params=(
    "h|help|Посмотреть помощь.|||ShowHelp; exit;"
    "v|version|Посмотреть версию программы.|||echo \$version; exit;"
    "V|verbose|Подробный вывод.|||verbose=true"
    "k|keep_files|Не удалять временные файлы. Может принимать значения 'yes', 'no'. По умолчанию '!DEFAULT!'.|:|'no'|"
    )

sound_params=(
    "i|input|Входной текстовый файл.|:||"
    "e|emotion|Эмоциональный настрой говорящего. Может принимать значения 'neutral', 'good', 'evil'. По умолчанию '!DEFAULT!'.|:|'neutral'|"
    "s|speaker|Голос говорящего. Может принимать значения 'oksana','jane','omazh','zahar','ermil','silaerkan','erkanyavas','alyss', 'nick'. По умолчанию '!DEFAULT!'.|:|'erkanyavas'|"
    "S|speed|Скорость озвучки. По умолчанию '!DEFAULT!'.|:|'1.0'|"
    "O|ffmpeg_opt|Дополнительные параметры ffmpeg.|:|''|"
    "f|format|Выходной формат. Может быть либо 'mp3', либо 'wav'. По умолчанию '!DEFAULT!'.|:|'mp3'|"
    "q|quality|Качество выходного файла. Может быть либо 'hi', либо 'lo'. По умолчанию '!DEFAULT!'.|:|'hi'|"
    "l|lang|Язык озвучки. По умолчанию '!DEFAULT!'.|:|'ru_RU'|"
#    "|||:||"
    )

video_params=(
    "o|output|Выходной видео файл.|:|''|"
    #"t|split|Деление страницы. Может быть либо 'half' (деление пополам), либо 'time' (плавное перемещение), либо 'no' (целиком). По умолчанию '!DEFAULT!'.|:|'half'|"
    "t|split|Деление страницы. Может быть либо 'half' (деление пополам), либо 'no' (целиком). По умолчанию '!DEFAULT!'.|:|'half'|"
    "W|video_width|Размер видео в пикселях по ширине. По умолчанию '!DEFAULT!'.|:|1920|"
    "H|video_height|Размер видео в пикселях по высоте. По умолчанию '!DEFAULT!'.|:|1080|"
    "p|ffmpeg_pre_options|Опции ffmpeg в самом начале. По умолчанию '!DEFAULT!'.|:|'-loop 1 -r 2'|"
    "P|ffmpeg_options|Опции ffmpeg. По умолчанию '!DEFAULT!'.|:|'-c:v libx264 -tune stillimage -preset ultrafast -crf 20 -shortest -pix_fmt yuv420p'|"
    "r|page_range|Указывает страницы из выходного файла для обработки. Пример '{1..32}', '{2..10..2}', '\$(seq 5 3 30)'|:|''|"
    "m|minimum_text_on_page|Минимальное количество символов на странице при котором происходит разделение страницы на две. По умолчанию '!DEFAULT!'.|:|1000|"
    "M|minimum_time_on_page|Минимальное количество секунд на страницу. По умолчанию '!DEFAULT!'.|:|5|"
#    "|||:||"
    )

all_params=("${common_params[@]}" "${sound_params[@]}" "${video_params[@]}")

# Загружаем библиотеку
function GetExec {
    local exec_file_name="$1"

    exec="$exec_file_name"
    [ ! -f "$exec" ] && exec="./$exec_file_name"
    [ ! -f "$exec" ] && exec="~/$exec_file_name"

    echo "$exec"
}

eval "source $(GetExec "parse_arg_lib")"

function ShowHelp() {
cat << EOF  
Использование: pdf2video -i <text_file> [-o <mp4_file>] [-hV]
Озвучивание русского текста из файла pdf и сохранение в видео

Общие параметры
$(ProcessParams common_params Params2Help)

Параметры звука
$(ProcessParams sound_params Params2Help)

Параметры видео
$(ProcessParams video_params Params2Help)
EOF
}

# -------------------------------------------

while true
do
cur_arg="$1"
[ "$cur_arg" = '--' ] && { shift; break; }
ProcessParams all_params Params2Case "$cur_arg" "$2"
shift
done

input_file="$input"
out_file="$output"

unuse_param="$*"
if [ "${input_file}" = "" ] || [ "${unuse_param}" != "" ]; then
    [ "${unuse_param}" != "" ] && echo "Параметры не расшифрованы \"$unuse_param\"" 
    ShowHelp
    exit
fi

[ "$out_file" = "" ] && { out_file="${input_file}.mp4"; [ $verbose ] && echo "Выходное имя файла \"$out_file\""; }

#----------------------------------------------------

page_count=$(pdfinfo "${input_file}" | awk '/^Pages:/ {print $2}')

video_file_names_array=()

function Text2mp3 {
    local text_file=$1
    local mp3_file=$2
    verb=""
    [ $verbose ] && verb="-V "

    cmd="$(GetExec "txt2mp3") -i '${text_file}' -o '${mp3_file}' -e '${emotion}' -s '${speaker}' -S '${speed}' -f '${format}' -q '${quality}' -l '${lang}' ${verb}"
    [ $verbose ] && echo "Команда для преобразования в звук текста '$cmd'"
    eval "$cmd"
}

function MakeVideo {
    local page_image_file=$1
    local page_mp3_file=$2
    local page_mp4_file=$3
    local split=$4

    local resized_page_image_file=$(mktemp -t "MakeVideo_resized_page_image_XXXXXXXXXXX.png"
)

    ffmpeg -y -i "${page_image_file}" -vf "scale=${video_width}:${video_height}:force_original_aspect_ratio=decrease,pad=${video_width}:${video_height}:(ow-iw)/2:(oh-ih)/2" "${resized_page_image_file}"
    [ $verbose ] && echo "ffmpeg $?"

    local play_time=$(mp3info -p "%S\n" "${page_mp3_file}")
    local time_opt="-c:a copy"
    if [ ${minimum_time_on_page} -ge $(( ${play_time} )) ]; then
        local add_time="$minimum_time_on_page" # $(( 5 - ${play_time} ))
        time_opt="-c:a mp3 -af adelay=${add_time}s:all=true" # 
        [ $verbose ] && echo "time_opt ${time_opt}"
    fi

    float_image=''
    video_filter=''
    if [ $split = 'time' ]; then
        float_image="-i \"${resized_page_image_file}\""
        video_filter="-filter_complex  \"[1:v]scale=${video_width}*2:${video_height}*2[scale1]; [0:v][scale1]overlay=enable='between=(t,0,${play_time})':x=-w/4:y=-t/(${play_time})*h/2[out]\" -map \"[out]\" -map \"2:a\" -t '${play_time}'"
    elif [ $split = 'half' ]; then
        float_image="-i \"${resized_page_image_file}\""
        video_filter="-filter_complex  \"[1:v]scale=${video_width}*2 - ${video_width}/20:${video_height}*2 - ${video_height}/20[scale1]; [1:v]scale=${video_width}*2 - ${video_width}/20:${video_height}*2 - ${video_height}/20[scale2]; [0:v][scale1]overlay=enable='between=(t,0,${play_time}/2)':x=-w/(4*1.026):y=0[out]; [out][scale2]overlay=enable='between=(t,${play_time}/2,${play_time})':x=-w/(4*1.026):y=-h/(2*1.026)[out]\" -map \"[out]\" -map \"2:a\" -t '${play_time}'"
    fi

    cmd="ffmpeg -y ${ffmpeg_pre_options} -i \"${resized_page_image_file}\" ${float_image} -i \"${page_mp3_file}\" ${video_filter} ${ffmpeg_options} ${time_opt} \"${page_mp4_file}\""
    [ $verbose ] && echo "cmd $cmd"
    eval "$cmd"
    [ $verbose ] && echo "ffmpeg $?"

    SAVE_IFS=$IFS
    IFS=""
    video_file_names_array+=(${page_mp4_file})
    IFS=$SAVE_IFS

    rm "${resized_page_image_file}"
}

[ $verbose ] && echo "Всего страниц $page_count"

for ((page=1;page<=${page_count};page++)); do

    if [ $page_range ]; then
        skip="true"
        for p in $(eval echo "$page_range"); 
        do 
            if [ $p = $page ]; then 
            skip="false"
            break
            fi
        done

        if [ $skip = "true" ]; then
            [ $verbose ] && echo "Пропускаем страницу №$page"
            continue
        fi
    fi

    [ $verbose ] && echo "------------------------------------------------"
    [ $verbose ] && echo "Обрабатываем страницу №$page"

    page_text_file=$(mktemp -t "pdf2video_page_text_file_${page}_XXXXXXXXXXX.txt"
)
    page_image_file=$(mktemp -t "pdf2video_page_image_file_${page}_XXXXXXXXXXX.png"
)
    pdftotext -f $page -l $page "${input_file}" "$page_text_file"
    convert -density 300 "${input_file}[$(( $page - 1))]" -quality 90 "$page_image_file"

    source_text="$(cat "${page_text_file}")"

    page_mp3_file=$(mktemp -t "pdf2video_page_mp3_file_XXXXXXXXXXX.mp3")

    Text2mp3 "$page_text_file" "$page_mp3_file"

    page_mp4_file="${input_file}_${page}.mp4"

    MakeVideo "$page_image_file" "$page_mp3_file" "$page_mp4_file" "$split"

    rm "$page_mp3_file"
    rm "$page_image_file"
    rm "$page_text_file"

done

SAVE_IFS=$IFS
IFS=""
[ $verbose ] && echo "Объединяем файлы ($PWD) ${video_file_names_array[*]} в $out_file"
ffmpeg -y -f concat -safe 0 -i <( for ((i = 0; i < ${#video_file_names_array[@]}; i++)) do echo "file '$PWD/${video_file_names_array[$i]}'"; done ) -acodec copy -vcodec copy "$out_file"
[ $verbose ] && echo "ffmpeg $?"

for ((i = 0; i < ${#video_file_names_array[@]}; i++)) do
    f="${video_file_names_array[$i]}"
    [ "$keep_files" = "no" ] && {
        rm "$f"
        [ $verbose ] && echo "Удаляем файл '$f'"
    }
done
IFS=$SAVE_IFS

[ $verbose ] && echo "Конечный файл создан '$out_file'!"

